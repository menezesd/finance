#ifndef PARAMETERS_H
#define PARAMETERS_H

class ParametersInner
{
 public:
  ParametersInner(){}
  virtual ParametersInner *clone() const = 0;
  virtual double integral(double time1, double time2) const = 0;
  virtual double integral_square(double time1, double time2) const = 0;
  virtual ~ParametersInner() {}
 private:
};

class Parameters
{

public:
Parameters(const ParametersInner& innerObject);
Parameters(const Parameters& original);
Parameters& operator=(const Parameters& original);
virtual ~Parameters();

inline double integral(double time1, double time2) const;
inline double integral_square(double time1, double time2) const;
double mean(double time1, double time2) const;
double root_mean_square(double time1, double time2) const;
private:
      ParametersInner* InnerObjectPtr;
};



	     
inline double Parameters::integral(double time1,
                                   double time2) const
{

      return InnerObjectPtr->integral(time1,time2);
}

inline double Parameters::integralSquare(double time1,
                                         double time2) const

{
      return InnerObjectPtr->integral_square(time1,time2);

}

class ParametersConstant : public ParametersInner
{
public:

      ParametersConstant(double constant);
virtual ParametersInner* clone() const;
virtual double integral(double time1, double time2) const;
virtual double integral_square(double time1, double time2) const;
private:
      double Constant;
      double ConstantSquare;
};


#endif
